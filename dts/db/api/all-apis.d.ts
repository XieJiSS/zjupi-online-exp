/** @format */
import * as DevicesAPI from "./devices-api";
declare const _default: {
    createDoorLock(id: string): Promise<import("../models/DoorLock").DoorLockModel | null>;
    getDoorLockById(id: string): Promise<import("../models/DoorLock").DoorLockModel | null>;
    getDoorLockByIdAttrsOnly<T extends keyof import("../models/DoorLock").DoorLockCreationAttributes>(id: string, attributes: readonly T[]): Promise<import("../../types/type-helper").TPartialModel<import("../models/DoorLock").DoorLockModel, T> | null>;
    getAllDoorLocks(): Promise<import("../models/DoorLock").DoorLockModel[]>;
    createLamp(id: string): Promise<import("../models/Lamp").LampModel | null>;
    getLampById(id: string): Promise<import("../models/Lamp").LampModel | null>;
    getLampByIdAttrsOnly<T_1 extends keyof import("../models/Lamp").LampCreationAttributes>(id: string, attributes: readonly T_1[]): Promise<import("../../types/type-helper").TPartialModel<import("../models/Lamp").LampModel, T_1> | null>;
    getAllLamps(): Promise<import("../models/Lamp").LampModel[]>;
    createSwitch(id: string): Promise<import("../models/Switch").SwitchModel | null>;
    getSwitchById(id: string): Promise<import("../models/Switch").SwitchModel | null>;
    getSwitchByIdAttrsOnly<T_2 extends keyof import("../models/Switch").SwitchCreationAttributes>(id: string, attributes: readonly T_2[]): Promise<import("../../types/type-helper").TPartialModel<import("../models/Switch").SwitchModel, T_2> | null>;
    getAllSwitches(): Promise<import("../models/Switch").SwitchModel[]>;
    createSensor(id: string): Promise<import("../models/Sensor").SensorModel | null>;
    getSensorById(id: string): Promise<import("../models/Sensor").SensorModel | null>;
    getSensorByIdAttrsOnly<T_3 extends keyof import("../models/Sensor").SensorCreationAttributes>(id: string, attributes: readonly T_3[]): Promise<import("../../types/type-helper").TPartialModel<import("../models/Sensor").SensorModel, T_3> | null>;
    getAllSensors(): Promise<import("../models/Sensor").SensorModel[]>;
    createPlace(placeId: string, image: string): Promise<import("../models/Place").PlaceModel | null>;
    deletePlaceById(placeId: string): Promise<void>;
    getPlaceById(placeId: string): Promise<import("../models/Place").PlaceModel | null>;
    getPlaceByIdAttrsOnly<T_4 extends keyof import("../models/Place").PlaceCreationAttributes>(placeId: string, attributes: readonly T_4[]): Promise<import("../../types/type-helper").TPartialModel<import("../models/Place").PlaceModel, T_4> | null>;
    getAllPlaces(): Promise<import("../models/Place").PlaceModel[]>;
    getAllPlacesAttrsOnly<T_5 extends keyof import("../models/Place").PlaceCreationAttributes>(attributes: readonly T_5[]): Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Place").PlaceModel, T_5>>;
    getDevicePrimitivesByPlaceId(placeId: string): Promise<DevicesAPI.DevicePrimitive[]>;
    findDeviceInDevices(devices: DevicesAPI.DevicePrimitive[], deviceId: string, type: DevicesAPI.DeviceEnum): DevicesAPI.DevicePrimitive | undefined;
    getDeviceModelFromDevicePrimitive(device: DevicesAPI.DevicePrimitive): Promise<DevicesAPI.DeviceModelWrapper | null>;
    getDeviceModelsFromDevicePrimitives(devices: DevicesAPI.DevicePrimitive[]): Promise<DevicesAPI.DeviceModelWrapper[]>;
    createVirtualDeviceModelFromDevicePrimitive(device: DevicesAPI.DevicePrimitive): Promise<DevicesAPI.VirtualDeviceModelWrapper | null>;
    getPositionByDevice(device: DevicesAPI.DevicePrimitive): Promise<import("../models/Position").PositionModel | null>;
    updateDevicePosition(placeId: string, deviceId: string, type: DevicesAPI.DeviceEnum, newPosition: DevicesAPI.DevicePosition): Promise<boolean>;
    updateDeviceState(placeId: string, deviceId: string, type: DevicesAPI.VirtualDeviceType, newState: boolean): Promise<boolean>;
    updateDeviceValue(placeId: string, deviceId: string, type: DevicesAPI.VirtualDeviceType, newValue: number): Promise<boolean>;
    removeDeviceFromPlace(placeId: string, deviceId: string, type: DevicesAPI.DeviceEnum): Promise<boolean>;
    createVirtualDevice(deviceId: string, type: DevicesAPI.VirtualDeviceType, pos: DevicesAPI.DevicePosition): Promise<false | null>;
    deleteVirtualDevice(placeId: string, deviceId: string, type: DevicesAPI.VirtualDeviceType): Promise<boolean>;
    deleteDevice(placeId: string, deviceId: string, type: DevicesAPI.DeviceEnum): Promise<boolean>;
    DeviceEnum: typeof DevicesAPI.DeviceEnum;
    generateRandomClientId: () => string;
    createRemoteCommand: (clientId: string, directive: import("./remote-control/remote-control-api").RemoteControlDirective, args?: string[] | undefined, status?: import("../models/RemoteCommand").REMOTE_CMD_STATE) => Promise<import("../models/RemoteCommand").RemoteCommandModel | null>;
    getAllRemoteCommands: () => Promise<import("../models/RemoteCommand").RemoteCommandModel[]>;
    getRemoteCommandByIds: (clientId: string, commandId: number) => Promise<import("../models/RemoteCommand").RemoteCommandModel | null>;
    getRemoteCommandsByClientId: (clientId: string) => Promise<import("../models/RemoteCommand").RemoteCommandModel[]>;
    getRemoteCommandsByClientIdAndStatus: (clientId: string, statusList: import("../models/RemoteCommand").REMOTE_CMD_STATE[]) => Promise<import("../models/RemoteCommand").RemoteCommandModel[]>;
    setRemoteCommandStatus: (clientId: string, commandId: number, status: import("../models/RemoteCommand").REMOTE_CMD_STATE, reportedResult?: string | null | undefined) => Promise<boolean>;
    invalidateRemoteCommandByCommandType: (clientId: string, commandType: string) => Promise<void>;
    createRemoteClient: (clientId: string, password: string, ip: string) => Promise<import("../models/RemoteClient").RemoteClientModel | null>;
    getAllRemoteClients: () => Promise<import("../models/RemoteClient").RemoteClientModel[]>;
    getAllRemoteClientsAttrsOnly: <T_6 extends "online" | "password" | "clientId" | "passwordExpireAt" | "ip" | "lastActive" | "isDead" | "linkId">(attributes: readonly T_6[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/RemoteClient").RemoteClientModel, T_6>>;
    getAllRemoteClientsWithLinks: () => Promise<(import("sequelize").Model<import("../models/RemoteClient").RemoteClientModelAttributes, import("../models/RemoteClient").RemoteClientCreationAttributes> & import("../models/RemoteClient").RemoteClientCreationAttributes & import("../models/RemoteClient").RemoteClientAdditionalModelAttributes & {
        link: import("../models/AccessLink").AccessLinkModel;
    })[]>;
    getRemoteClientById: (clientId: string) => Promise<import("../models/RemoteClient").RemoteClientModel | null>;
    getRemoteClientByIdAttrsOnly: <T_7 extends "online" | "password" | "clientId" | "passwordExpireAt" | "ip" | "lastActive" | "isDead" | "linkId">(clientId: string, attributes: readonly T_7[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/RemoteClient").RemoteClientModel, T_7> | null>;
    removeRemoteClientById: (clientId: string) => Promise<void>;
    setRemoteClientPasswordById: (clientId: string, password: string, validDuration?: number) => Promise<import("../models/RemoteClient").RemoteClientModel | null>;
    invalidatePasswordById: (clientId: string) => Promise<import("../models/RemoteClient").RemoteClientModel | null>;
    setActiveByRemoteClientId: (clientId: string) => Promise<void>;
    isRemoteClientActive: (clientId: string) => Promise<boolean>;
    createStudent: (name: string, phone: string) => Promise<import("../models/Student").StudentModel | null>;
    getLinkByStudentId: (studentId: number) => Promise<import("../models/AccessLink").AccessLinkModel | null>;
    getLinkByStudentPhone: (phone: string) => Promise<import("../models/AccessLink").AccessLinkModel | null>;
    getAllStudents: () => Promise<import("../models/Student").StudentModel[]>;
    getAllStudentsAttrsOnly: <T_8 extends "name" | "linkId" | "phone" | "studentId">(attributes: readonly T_8[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Student").StudentModel, T_8>>;
    getStudentById: (studentId: number) => Promise<import("../models/Student").StudentModel | null>;
    getStudentByIdAttrsOnly: <T_9 extends "name" | "linkId" | "phone" | "studentId">(studentId: number, attributes: readonly T_9[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/Student").StudentModel, T_9> | null>;
    getStudentByLinkId: (linkId: number) => Promise<import("../models/Student").StudentModel | null>;
    getStudentByLinkIdAttrsOnly: <T_10 extends "name" | "linkId" | "phone" | "studentId">(linkId: number, attributes: readonly T_10[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/Student").StudentModel, T_10> | null>;
    getCameraByStudentId: (studentId: number) => Promise<import("../models/Camera").CameraModel | null>;
    getCameraByStudentPhone: (phone: string) => Promise<import("../models/Camera").CameraModel | null>;
    getRemoteClientByStudentId: (studentId: number) => Promise<import("../models/RemoteClient").RemoteClientModel | null>;
    getRemoteClientByStudentPhone: (phone: string) => Promise<import("../models/RemoteClient").RemoteClientModel | null>;
    setStudentLinkId: (studentId: number, linkId: number) => Promise<import("../models/Student").StudentModel | null>;
    removeStudentById: (studentId: number) => Promise<void>;
    getAdminCount: () => Promise<number>;
    getAdminById: (adminId: number) => Promise<import("../models/Admin").AdminModel | null>;
    getAdminByPhone: (phone: string) => Promise<import("../models/Admin").AdminModel | null>;
    getAdminByUsername: (username: string) => Promise<import("../models/Admin").AdminModel | null>;
    createAdmin: (username: string, phone: string, password: string) => Promise<import("../models/Admin").AdminModel | null>;
    isValidAdminCredentials: (username: string, password: string) => Promise<boolean>;
    changeAdminPassword: (adminId: number, password: string) => Promise<boolean>;
    createAccessLink: (clientId: string, options: Required<import("./panel/access-link-api").AccessLinkValidTimeOptions>) => Promise<import("../models/AccessLink").AccessLinkModel | null>;
    removeAccessLink: (linkId: number) => Promise<boolean>;
    assignCameraToLink: (cameraId: string, linkId: number) => Promise<boolean>;
    removeCameraFromLink: (linkId: number) => Promise<boolean>;
    assignLinkToStudent: (linkId: number, studentId: number) => Promise<boolean>;
    removeLinkFromStudent: (linkId: number) => Promise<boolean>;
    assignLinkToRemoteClient: (linkId: number, clientId: string) => Promise<boolean>;
    getLinkById: (linkId: number) => Promise<import("../models/AccessLink").AccessLinkModel | null>;
    getLinkByIdAttrsOnly: <T_11 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "isValid" | "linkPath" | "validAfter" | "validUntil">(linkId: number, attributes: readonly T_11[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/AccessLink").AccessLinkModel, T_11> | null>;
    getLinkByLinkPath: (linkPath: string) => Promise<import("../models/AccessLink").AccessLinkModel | null>;
    getLinkIfValidByLinkPath: (linkPath: string) => Promise<import("../models/AccessLink").AccessLinkModel | null>;
    getAllLinks: () => Promise<import("../models/AccessLink").AccessLinkModel[]>;
    getAllLinksAttrsOnly: <T_12 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "isValid" | "linkPath" | "validAfter" | "validUntil">(attributes: readonly T_12[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/AccessLink").AccessLinkModel, T_12>>;
    getAllValidLinks: () => Promise<import("../models/AccessLink").AccessLinkModel[]>;
    getAllValidLinksAttrsOnly: <T_13 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "isValid" | "linkPath" | "validAfter" | "validUntil">(attributes: readonly T_13[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/AccessLink").AccessLinkModel, T_13>>;
    invalidateLinkById: (linkId: number) => Promise<boolean>;
    invalidateLinkByLinkPath: (linkPath: string) => Promise<boolean>;
    revalidateLinkById: (linkId: number, validUntil: Date) => Promise<boolean>;
    setValidTimeById: (linkId: number, options: import("./panel/access-link-api").AccessLinkValidTimeOptions) => Promise<boolean>;
    createDBLog: typeof import("./db-log-api").createDBLog;
    getAllLogs: () => Promise<import("../models/DBLog").DBLogModel[]>;
    getAllLogsAttrsOnly: <T_14 extends "source" | "text" | "level" | "createdAt" | "logId">(attributes: readonly T_14[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/DBLog").DBLogModel, T_14>>;
    getLogById: (logId: number) => Promise<import("../models/DBLog").DBLogModel | null>;
    getLogByIdAttrsOnly: <T_15 extends "source" | "text" | "level" | "createdAt" | "logId">(logId: number, attributes: readonly T_15[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/DBLog").DBLogModel, T_15> | null>;
    getPersistentLoggerUtil: typeof import("./db-log-api").getPersistentLoggerUtil;
    getCameraById: (cameraId: string) => Promise<import("../models/Camera").CameraModel | null>;
    getCameraByIdAttrsOnly: <T_16 extends keyof import("../models/Camera").CameraAdditionalModelAttributesReadonly | keyof import("../models/Camera").CameraCreationAttributes>(cameraId: string, attributes: readonly T_16[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/Camera").CameraModel, T_16> | null>;
    createCamera: (cameraId: string, ip: string) => Promise<import("../models/Camera").CameraModel | null>;
    isCameraOnline: (cameraId: string) => Promise<boolean>;
    getAllCameras: () => Promise<import("../models/Camera").CameraModel[]>;
    getAllCamerasAttrsOnly: <T_17 extends keyof import("../models/Camera").CameraAdditionalModelAttributesReadonly | keyof import("../models/Camera").CameraCreationAttributes>(attributes: readonly T_17[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Camera").CameraModel, T_17>>;
    getAllOnlineCameras: () => Promise<import("../models/Camera").CameraModel[]>;
    getAllOnlineCamerasAttrsOnly: <T_18 extends keyof import("../models/Camera").CameraAdditionalModelAttributesReadonly | keyof import("../models/Camera").CameraCreationAttributes>(attributes: readonly T_18[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Camera").CameraModel, T_18>>;
    appendCameraErrorReport: (cameraId: string, error: import("../../types/type-helper").TMarkPartialAttrs<import("../../camera/camera-server").CameraReportErrorReqBody, "cameraId">) => Promise<void>;
    removeCamera: (cameraId: string) => Promise<void>;
    setActiveByCameraId: (cameraId: string) => Promise<void>;
};
export default _default;
