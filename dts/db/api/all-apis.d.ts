declare const _default: {
    generateRandomClientId: () => string;
    createRemoteCommand: (clientId: string, directive: import("./remote-control/remote-control-api").RemoteControlDirective, args: string[]) => Promise<import("../models/RemoteCommand").RemoteCommandModel>;
    getRemoteCommands: () => Promise<import("../models/RemoteCommand").RemoteCommandModel[]>;
    getRemoteCommandById: (clientId: string, commandId: number) => Promise<import("../models/RemoteCommand").RemoteCommandModel>;
    getRemoteCommandsByClientId: (clientId: string) => Promise<import("../models/RemoteCommand").RemoteCommandModel[]>;
    getRemoteCommandsByClientIdAndStatus: (clientId: string, status: "failed" | "finished" | "running") => Promise<import("../models/RemoteCommand").RemoteCommandModel[]>;
    setRemoteCommandStatus: (clientId: string, commandId: number, status: "failed" | "finished" | "running", reportedResult?: string) => Promise<boolean>;
    invalidateRemoteCommandByCommandType: (clientId: string, commandType: string) => Promise<void>;
    createRemoteClient: (clientId: string, password: string, ip: string) => Promise<import("../models/RemoteClient").RemoteClientModel>;
    getAllRemoteClients: () => Promise<import("../models/RemoteClient").RemoteClientModel[]>;
    getAllRemoteClientsAttrsOnly: <T extends "online" | "password" | "clientId" | "passwordExpireAt" | "nextPassword" | "ip" | "lastActive" | "isDead" | "linkId">(attributes: readonly T[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/RemoteClient").RemoteClientModel, T>>;
    getAllRemoteClientsWithLinks: () => Promise<(import("sequelize/types").Model<import("../models/RemoteClient").RemoteClientModelAttributes, import("../models/RemoteClient").RemoteClientCreationAttributes> & import("../models/RemoteClient").RemoteClientCreationAttributes & import("../models/RemoteClient").RemoteClientAdditionalModelAttributes & {
        link: import("../models/AccessLink").AccessLinkModel;
    })[]>;
    getRemoteClientById: (clientId: string) => Promise<import("../models/RemoteClient").RemoteClientModel>;
    getRemoteClientByIdAttrsOnly: <T_1 extends "online" | "password" | "clientId" | "passwordExpireAt" | "nextPassword" | "ip" | "lastActive" | "isDead" | "linkId">(clientId: string, attributes: readonly T_1[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/RemoteClient").RemoteClientModel, T_1>>;
    removeRemoteClientById: (clientId: string) => Promise<void>;
    setRemoteClientPasswordById: (clientId: string, password: string) => Promise<import("../models/RemoteClient").RemoteClientModel>;
    invalidatePasswordById: (clientId: string) => Promise<import("../models/RemoteClient").RemoteClientModel>;
    setActiveByRemoteClientId: (clientId: string) => Promise<void>;
    isRemoteClientActive: (clientId: string) => Promise<boolean>;
    createStudent: (name: string, phone: string) => Promise<import("../models/Student").StudentModel>;
    getLinkByStudentId: (studentId: number) => Promise<import("../models/AccessLink").AccessLinkModel>;
    getLinkByStudentPhone: (phone: string) => Promise<import("../models/AccessLink").AccessLinkModel>;
    getAllStudents: () => Promise<import("../models/Student").StudentModel[]>;
    getAllStudentsAttrsOnly: <T_2 extends "name" | "linkId" | "studentId" | "phone">(attributes: readonly T_2[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Student").StudentModel, T_2>>;
    getStudentById: (studentId: number) => Promise<import("../models/Student").StudentModel>;
    getStudentByIdAttrsOnly: <T_3 extends "name" | "linkId" | "studentId" | "phone">(studentId: number, attributes: readonly T_3[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/Student").StudentModel, T_3>>;
    getStudentByLinkId: (linkId: number) => Promise<import("../models/Student").StudentModel>;
    getStudentByLinkIdAttrsOnly: <T_4 extends "name" | "linkId" | "studentId" | "phone">(linkId: number, attributes: readonly T_4[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/Student").StudentModel, T_4>>;
    getCameraByStudentId: (studentId: number) => Promise<import("../models/Camera").CameraModel>;
    getCameraByStudentPhone: (phone: string) => Promise<import("../models/Camera").CameraModel>;
    getRemoteClientByStudentId: (studentId: number) => Promise<import("../models/RemoteClient").RemoteClientModel>;
    getRemoteClientByStudentPhone: (phone: string) => Promise<import("../models/RemoteClient").RemoteClientModel>;
    setStudentLinkId: (studentId: number, linkId: number) => Promise<import("../models/Student").StudentModel>;
    removeStudentById: (studentId: number) => Promise<void>;
    getAdminCount: () => Promise<number>;
    getAdminById: (adminId: number) => Promise<import("../models/Admin").AdminModel>;
    getAdminByUsername: (username: string) => Promise<import("../models/Admin").AdminModel>;
    createAdmin: (username: string, password: string) => Promise<import("../models/Admin").AdminModel>;
    isValidAdminCredentials: (username: string, password: string) => Promise<boolean>;
    changeAdminPassword: (adminId: number, password: string) => Promise<boolean>;
    createAccessLink: (clientId: string, options: Required<import("./panel/access-link-api").AccessLinkValidTimeOptions>) => Promise<import("../models/AccessLink").AccessLinkModel>;
    removeAccessLink: (linkId: number) => Promise<boolean>;
    assignCameraToLink: (linkId: number, cameraId: string) => Promise<boolean>;
    removeCameraFromLink: (linkId: number) => Promise<boolean>;
    assignLinkToStudent: (linkId: number, studentId: number) => Promise<boolean>;
    removeLinkFromStudent: (linkId: number) => Promise<boolean>;
    assignLinkToRemoteClient: (linkId: number, clientId: string) => Promise<boolean>;
    getLinkById: (linkId: number) => Promise<import("../models/AccessLink").AccessLinkModel>;
    getLinkByIdAttrsOnly: <T_5 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "linkPath" | "validAfter" | "validUntil" | "isValid">(linkId: number, attributes: readonly T_5[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/AccessLink").AccessLinkModel, T_5>>;
    getLinkByLinkPath: (linkPath: string) => Promise<import("../models/AccessLink").AccessLinkModel>;
    getLinkIfValidByLinkPath: (linkPath: string) => Promise<import("../models/AccessLink").AccessLinkModel>;
    getAllLinks: () => Promise<import("../models/AccessLink").AccessLinkModel[]>;
    getAllLinksAttrsOnly: <T_6 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "linkPath" | "validAfter" | "validUntil" | "isValid">(attributes: readonly T_6[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/AccessLink").AccessLinkModel, T_6>>;
    getAllValidLinks: () => Promise<import("../models/AccessLink").AccessLinkModel[]>;
    getAllValidLinksAttrsOnly: <T_7 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "linkPath" | "validAfter" | "validUntil" | "isValid">(attributes: readonly T_7[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/AccessLink").AccessLinkModel, T_7>>;
    invalidateLinkById: (linkId: number) => Promise<boolean>;
    invalidateLinkByLinkPath: (linkPath: string) => Promise<boolean>;
    revalidateLinkById: (linkId: number, validUntil: Date) => Promise<boolean>;
    setValidTimeById: (linkId: number, options: import("./panel/access-link-api").AccessLinkValidTimeOptions) => Promise<boolean>;
    createDBLog: typeof import("./db-log-api").createDBLog;
    getAllLogs: () => Promise<import("../models/DBLog").DBLogModel[]>;
    getAllLogsAttrsOnly: <T_8 extends "source" | "text" | "level" | "createdAt" | "logId">(attributes: readonly T_8[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/DBLog").DBLogModel, T_8>>;
    getLogById: (logId: number) => Promise<import("../models/DBLog").DBLogModel>;
    getLogByIdAttrsOnly: <T_9 extends "source" | "text" | "level" | "createdAt" | "logId">(logId: number, attributes: readonly T_9[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/DBLog").DBLogModel, T_9>>;
    getPersistentLoggerUtil: typeof import("./db-log-api").getPersistentLoggerUtil;
    getCameraById: (cameraId: string) => Promise<import("../models/Camera").CameraModel>;
    getCameraByIdAttrsOnly: <T_10 extends keyof import("../models/Camera").CameraAdditionalModelAttributesReadonly | keyof import("../models/Camera").CameraCreationAttributes>(cameraId: string, attributes: readonly T_10[]) => Promise<import("../../types/type-helper").TPartialModel<import("../models/Camera").CameraModel, T_10>>;
    createCamera: (cameraId: string, ip: string) => Promise<import("../models/Camera").CameraModel>;
    isCameraOnline: (cameraId: string) => Promise<boolean>;
    getAllCameras: () => Promise<import("../models/Camera").CameraModel[]>;
    getAllCamerasAttrsOnly: <T_11 extends keyof import("../models/Camera").CameraAdditionalModelAttributesReadonly | keyof import("../models/Camera").CameraCreationAttributes>(attributes: readonly T_11[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Camera").CameraModel, T_11>>;
    getAllOnlineCameras: () => Promise<import("../models/Camera").CameraModel[]>;
    getAllOnlineCamerasAttrsOnly: <T_12 extends keyof import("../models/Camera").CameraAdditionalModelAttributesReadonly | keyof import("../models/Camera").CameraCreationAttributes>(attributes: readonly T_12[]) => Promise<import("../../types/type-helper").TPartialModelArr<import("../models/Camera").CameraModel, T_12>>;
    appendCameraErrorReport: (cameraId: string, error: import("../../types/type-helper").TMarkPartialAttrs<import("../../camera/camera-server").CameraReportErrorReqBody, "cameraId">) => Promise<void>;
    removeCamera: (cameraId: string) => Promise<void>;
    setActiveByCameraId: (cameraId: string) => Promise<void>;
};
export default _default;
