declare const _default: {
    createStudent: (name: string, phone: string) => Promise<import("../../models/Student").StudentModel>;
    getLinkByStudentId: (studentId: number) => Promise<import("../../models/AccessLink").AccessLinkModel>;
    getLinkByStudentPhone: (phone: string) => Promise<import("../../models/AccessLink").AccessLinkModel>;
    getAllStudents: () => Promise<import("../../models/Student").StudentModel[]>;
    getAllStudentsAttrsOnly: <T extends "name" | "linkId" | "studentId" | "phone">(attributes: readonly T[]) => Promise<import("../../../types/type-helper").TModelListAttrsOnly<import("../../models/Student").StudentModelCtor, T>>;
    getStudentById: (studentId: number) => Promise<import("../../models/Student").StudentModel>;
    getStudentByIdAttrsOnly: <T_1 extends "name" | "linkId" | "studentId" | "phone">(studentId: number, attributes: readonly T_1[]) => Promise<import("../../../types/type-helper").TModelAttrsOnly<import("../../models/Student").StudentModelCtor, T_1>>;
    getStudentByLinkId: (linkId: number) => Promise<import("../../models/Student").StudentModel>;
    getStudentByLinkIdAttrsOnly: <T_2 extends "name" | "linkId" | "studentId" | "phone">(linkId: number, attributes: readonly T_2[]) => Promise<import("../../../types/type-helper").TModelAttrsOnly<import("../../models/Student").StudentModelCtor, T_2>>;
    getCameraByStudentId: (studentId: number) => Promise<import("../../models/Camera").CameraModel>;
    getCameraByStudentPhone: (phone: string) => Promise<import("../../models/Camera").CameraModel>;
    getRemoteClientByStudentId: (studentId: number) => Promise<import("../../models/RemoteClient").RemoteClientModel>;
    getRemoteClientByStudentPhone: (phone: string) => Promise<import("../../models/RemoteClient").RemoteClientModel>;
    setStudentLinkId: (studentId: number, linkId: number) => Promise<import("../../models/Student").StudentModel>;
    removeStudentById: (studentId: number) => Promise<void>;
    getAdminCount: () => Promise<number>;
    getAdminById: (adminId: number) => Promise<import("../../models/Admin").AdminModel>;
    getAdminByUsername: (username: string) => Promise<import("../../models/Admin").AdminModel>;
    createAdmin: (username: string, password: string) => Promise<import("../../models/Admin").AdminModel>;
    isValidAdminCredentials: (username: string, password: string) => Promise<boolean>;
    changeAdminPassword: (adminId: number, password: string) => Promise<boolean>;
    createAccessLink: (clientId: string, options: Required<import("./access-link-api").AccessLinkValidTimeOptions>) => Promise<import("../../models/AccessLink").AccessLinkModel>;
    removeAccessLink: (linkId: number) => Promise<boolean>;
    assignCameraToLink: (linkId: number, cameraId: string) => Promise<boolean>;
    removeCameraFromLink: (linkId: number) => Promise<boolean>;
    assignLinkToStudent: (linkId: number, studentId: number) => Promise<boolean>;
    removeLinkFromStudent: (linkId: number) => Promise<boolean>;
    assignLinkToRemoteClient: (linkId: number, clientId: string) => Promise<boolean>;
    getLinkById: (linkId: number) => Promise<import("../../models/AccessLink").AccessLinkModel>;
    getLinkByIdAttrsOnly: <T_3 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "linkPath" | "validAfter" | "validUntil" | "isValid">(linkId: number, attributes: readonly T_3[]) => Promise<import("../../../types/type-helper").TModelAttrsOnly<import("../../models/AccessLink").AccessLinkModelCtor, T_3>>;
    getLinkByLinkPath: (linkPath: string) => Promise<import("../../models/AccessLink").AccessLinkModel>;
    getLinkIfValidByLinkPath: (linkPath: string) => Promise<import("../../models/AccessLink").AccessLinkModel>;
    getAllLinks: () => Promise<import("../../models/AccessLink").AccessLinkModel[]>;
    getAllLinksAttrsOnly: <T_4 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "linkPath" | "validAfter" | "validUntil" | "isValid">(attributes: readonly T_4[]) => Promise<import("../../../types/type-helper").TModelListAttrsOnly<import("../../models/AccessLink").AccessLinkModelCtor, T_4>>;
    getAllValidLinks: () => Promise<import("../../models/AccessLink").AccessLinkModel[]>;
    getAllValidLinksAttrsOnly: <T_5 extends "createdAt" | "clientId" | "linkId" | "cameraId" | "linkPath" | "validAfter" | "validUntil" | "isValid">(attributes: readonly T_5[]) => Promise<import("../../../types/type-helper").TModelListAttrsOnly<import("../../models/AccessLink").AccessLinkModelCtor, T_5>>;
    invalidateLinkById: (linkId: number) => Promise<boolean>;
    invalidateLinkByLinkPath: (linkPath: string) => Promise<boolean>;
    revalidateLinkById: (linkId: number, validUntil: Date) => Promise<boolean>;
    setValidTimeById: (linkId: number, options: import("./access-link-api").AccessLinkValidTimeOptions) => Promise<boolean>;
};
export default _default;
